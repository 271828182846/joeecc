#!/usr/bin/python3
import re
import subprocess
import collections

openssl = "openssl"

FPDomainParams = collections.namedtuple("FPDomainParams", [ "A", "B", "p", "n", "h", "Gx", "Gy" ])

def openssl_get_all_curvenames():
	cmd = [ openssl, "ecparam", "-list_curves" ]
	output = subprocess.check_output(cmd)
	output = output.decode("utf-8").split("\n")
	for line in output:
		if line.endswith("prime field"):
			line = line.split(":")
			line = line[0]
			line = line.strip()
			yield line

def openssl_get_repr(curvename):
	cmd = [ openssl, "ecparam", "-name", curvename, "-param_enc", "explicit", "-text", "-noout" ]
	output = subprocess.check_output(cmd)
	output = output.decode("utf-8").split("\n")
	return output

def parse_openssl(output):
	parsed = { }
	single_line_re = re.compile("(?P<key>[^\s].*):\s*(?P<value>[^\s].*)$")
	multi_line_re = re.compile("(?P<key>[^\s].*):\s*$")

	(key, value) = (None, None)
	for line in output:
		if line == "":
			continue
		if (key is not None) and line.startswith(" "):
			value.append(line)
			continue
		elif (key is not None):
			parsed[key] = value
			key = None
			value = None

		if key is None:
			result = single_line_re.match(line)
			if result:
				result = result.groupdict()
				parsed[result["key"]] = result["value"]
				continue

			result = multi_line_re.match(line)
			if result:
				result = result.groupdict()
				key = result["key"]
				value = [ ]
				continue

			raise Exception("Don't know what to do: \"%s\"" % (line))

	if key is not None:
		parsed[key] = value

	parsed = { key: "".join(value).strip() for (key, value) in parsed.items() }

	return parsed

def parse_bytes(bytestr):
	if "(0x" in bytestr:
		bytestr = bytestr.split("(0x")[1]
		pad = True
	else:
		pad = False
	bytestr = bytestr.replace(")", "")
	bytestr = bytestr.replace(":", "")
	bytestr = bytestr.replace(" ", "")
	if pad and ((len(bytestr) % 2) == 1):
		bytestr = "0" + bytestr
	if bytestr == "0":
		bytestr = "00"
	data = bytes.fromhex(bytestr)
	return data

def bytestoint(data):
	return sum(value << (8 * pos) for (pos, value) in enumerate(reversed(data)))

def parse_int(bytestr):
	return bytestoint(parse_bytes(bytestr))

def parse_curvefp(output):
	output = parse_openssl(output)
	assert(output["Field Type"] == "prime-field")

	A = parse_int(output["A"])
	B = parse_int(output["B"])
	p = parse_int(output["Prime"])
	n = parse_int(output["Order"])
	h = parse_int(output["Cofactor"])
	G = parse_bytes(output["Generator (uncompressed)"])
	assert(G[0] == 0x04)
	G = G[1:]
	assert((len(G) % 2) == 0)
	Gx = bytestoint(G[ : len(G) // 2])
	Gy = bytestoint(G[len(G) // 2 : ])

	return FPDomainParams(A = A, B = B, p = p, n = n, h = h, Gx = Gx, Gy = Gy)

def print_curvefp(name, domainparams):
	maxbits = max(param.bit_length() for param in domainparams)
	def print_param(name, value, maxbits):
		bits = value.bit_length()
		if value < 0x100:
			print("		%-2s = %d," % (name, value))
		elif bits < maxbits // 2:
			print("		%-2s = %#x," % (name, value))
		else:
			padlen = 1 + 2 * ((maxbits + 7) // 8)
			print("		%-2s = %#0*x," % (name, padlen, value))

	print("	\"%s\": EllipticCurveFP(" % (name))
	print_param("a", domainparams.A, maxbits)
	print_param("b", domainparams.B, maxbits)
	print_param("p", domainparams.p, maxbits)
	print_param("n", domainparams.n, maxbits)
	print_param("h", domainparams.h, maxbits)
	print_param("Gx", domainparams.Gx, maxbits)
	print_param("Gy", domainparams.Gy, maxbits)
	print("	),")


for curvename in openssl_get_all_curvenames():
	output = openssl_get_repr(curvename)
	domainparams = parse_curvefp(output)
	print_curvefp(curvename, domainparams)
#	print(output)
#print(parse_curvefp(openssl_get_repr("secp521r1")))
